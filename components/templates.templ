package components

import (
	"fmt"
	"slices"
	"spt-give-ui/backend/models"
)

templ LoginPage(version string) {
	<div id="main" class="w-full h-full p-2">
		<h1 class="mb-4">GIVE UI - v{ version }</h1>
		<div class="card align-middle mx-auto bg-base-200 w-full max-w-md shadow-2xl">
			<form class="card-body" hx-post="/connect" hx-target="#main" hx-swap="innerHTML" hx-indicator="#loader" hx-disabled-elt="find button">
				<div class="form-control">
					<label class="label">
						<span class="label-text">SPT URL</span>
					</label>
					<input type="text" name="url" value="http://127.0.0.1:6969" class="input input-bordered" required/>
				</div>
				<div class="form-control mt-6">
					<button class="btn btn-primary">CONNECT</button>
				</div>
				<progress id="loader" class="progress w-full htmx-indicator"></progress>
			</form>
		</div>
	</div>
}

templ ErrorConnection(e string, version string) {
	<h1 class="mb-4">GIVE UI - v{ version }</h1>
	<div class="card mx-auto bg-base-200 w-full max-w-md shadow-2xl">
		<div class="card-body">
			<h2 class="text-error">Connection Error</h2>
			<div>Please check SPT Server is running, the connection details are correct and the mod is installed in your user folder</div>
			<div>Details: { e }</div>
			<button class="btn btn-primary btn-outline" onclick="location.reload()">Go back</button>
		</div>
	</div>
}

templ ProfileList(profiles []models.SPTProfile, version string) {
	<h1 class="mb-4">GIVE UI - v{ version }</h1>
	<div class="card mx-auto bg-base-200 w-full max-w-md shadow-2xl">
		<div class="card-body">
			<h2>Select profile</h2>
			<fieldset id="profile-fieldset">
				<ul class="flex flex-col gap-1">
					for _, i := range profiles {
						<li class="flex flex-row items-center justify-between gap-2">
							<div>{ i.Info.Username } ({ i.Info.Id })</div>@_Button("btn-primary btn-sm", fmt.Sprintf("/items/%s", i.Info.Id), "#main", "innerHTML", "get", "SELECT", "#loader", "#profile-fieldset")
						</li>
					}
				</ul>
			</fieldset>
			<progress id="loader" class="progress w-full htmx-indicator"></progress>
		</div>
	</div>
}

templ ItemsList(allItems *models.AllItems, userBuilds models.UserBuilds, sessionId string) {
	<div role="tablist" class="tabs tabs-bordered tabs-lg h-full">
		<input type="radio" name="my_tabs_1" role="tab" class="tab" aria-label="Items" checked="checked"/>
		<div role="tabpanel" class="tab-content p-1 overflow-y-auto">
			@_Items(allItems, sessionId)
		</div>
		<input type="radio" name="my_tabs_1" role="tab" class="tab" aria-label="User weapons"/>
		<div role="tabpanel" class="tab-content p-1 overflow-y-auto">
			@_UserWeapons(allItems, userBuilds, sessionId)
		</div>
	</div>
}

templ ItemDetail(item models.ViewItem, maybePresetId string) {
	<div class="card w-full">
		<figure>
			if maybePresetId != "" {
				<img alt="item" style="max-height: 200px" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", maybePresetId) }/>
			} else {
				<img alt="item" style="max-height: 200px" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", item.Id) }/>
			}
		</figure>
		<div class="card-body">
			<h2 class="card-title">{ item.Name }</h2>
			<p class="text-justify">{ item.Description }</p>
			<div class="card-actions justify-end">
				<button class="btn btn-primary" hx-post={ fmt.Sprintf("/item/%s", item.Id) } hx-target="#main" hx-trigger="click" hx-disabled-elt="this" hx-indicator="#loader">
					<div id="loader" class="button-loader">
						<span class="loading loading-spinner"></span>
						<span class="button-hide">Give</span>
					</div>
				</button>
			</div>
		</div>
	</div>
}

templ _Items(allItems *models.AllItems, sessionId string) {
	<script type="text/javascript">

        let previousSelectedItem = null;
        function filterItems() {
              const input = document.getElementById('filter-items-input');
              const filter = input.value.toUpperCase().trim();
              const itemList = document.getElementById("item-list");
              const li = itemList.getElementsByTagName('li');

              // Loop through all list items, and hide those who don't match the search query
              for (i = 0; i < li.length; i++) {
                const txtValue = (li[i].textContent || li[i].innerText).toUpperCase().trim();
                const itemCategory = li[i].parentElement.getAttribute('data-category').toUpperCase().trim();
                if (txtValue.indexOf(filter) > -1 || itemCategory.indexOf(filter) > -1) {
                  li[i].style.display = "";
                } else {
                  li[i].style.display = "none";
                }
              }

              // hide empty categories
          const section = itemList.getElementsByTagName('details');
              for (i = 0; i < section.length; i++) {
                const innerLis = section[i].getElementsByTagName('li');
                let anyLiVisible = false;
                for (j = 0; j < innerLis.length; j++) {
                    if (innerLis[j].style.display === "") {
                        anyLiVisible = true;
                        break;
                    }
                }
                if (anyLiVisible) {
                    section[i].style.display = "";
                } else {
                    section[i].style.display = "none";
                }
              }
        }

        function selectItem(element) {
            const classToToggle = 'text-primary';
            if (previousSelectedItem) {
                previousSelectedItem.classList.remove(classToToggle);
            }
            element.classList.add(classToToggle);
            previousSelectedItem = element;
        }
      </script>
	<div class="flex flex-col h-full">
		<div class="w-full p-2">
			<input type="text" autocomplete="off" id="filter-items-input" onkeyup="filterItems()" placeholder="Filter here" class="input input-bordered w-full max-w-xs"/>
		</div>
		<div class="flex w-full h-full min-h-0" id="item-list">
			<div class="card p-2 bg-base-200 rounded-box grid overflow-y-auto place-items-start flex-1 basis-2/5 content-start gap-4">
				for _, cat := range allItems.Categories {
					<details class="flex flex-col w-full" open>
						<summary class="flex flex-row-reverse justify-between flex-2 sticky -top-2 bg-base-200 border-b-2 border-white"><h2>{ cat }</h2></summary>
						<ul data-category={ cat }>
							for _, i := range allItems.Items {
								if i.Category == cat {
									<li class="text-left cursor-pointer hover:bg-primary hover:text-base-content" onclick="selectItem(this)" hx-get={ fmt.Sprintf("/item/%s", i.Id) } hx-trigger="click" hx-target="#item-details" hx-swap="innerHTML"><div>{ i.Name }</div></li>
								}
							}
						</ul>
					</details>
				}
			</div>
			<div class="divider divider-horizontal"></div>
			<div class="card p-2 bg-base-200 rounded-box grid flex-grow place-items-start w-full" id="item-details">
				<div>
					<p class="text-9xl mb-4">ðŸ‘€</p>
					<p class="text-left mb-4">Select something from the left menu and press the button <em>Give</em>. You will receive a message with the item at maximum stack size.</p>
					<p class="text-left">If you need more, just keep pressing :-)</p>
				</div>
			</div>
		</div>
	</div>
}

templ _UserWeapons(allItems *models.AllItems, userBuilds models.UserBuilds, sessionId string) {
	<script type="text/javascript">

        function filterUserWeapons() {
              const input = document.getElementById('filter-user-weapons-input');
              const filter = input.value.toUpperCase().trim();
              const itemList = document.getElementById("weapons-list");
              const cards = itemList.getElementsByClassName('card-to-filter');

              // Loop through all list items, and hide those who don't match the search query
              for (i = 0; i < cards.length; i++) {
                const title = cards[i].getElementsByTagName('h2')[0];
                const txtValue = (title.textContent || title.innerText).toUpperCase().trim();
                if (txtValue.indexOf(filter) > -1) {
                  cards[i].style.display = "";
                } else {
                  cards[i].style.display = "none";
                }
              }
        }

    </script>
	<div class="h-full flex flex-col">
		if len(userBuilds.WeaponBuilds) == 0 {
			<div role="alert" class="alert alert-info">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					class="h-6 w-6 shrink-0 stroke-current"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
					></path>
				</svg>
				<span>You don't have weapons presets. Make sure you have the workbench at level 1 in your hideout and some custom presets saved.</span>
			</div>
			<div class="p-2">
				<p class="text-left">Psss Psss you might want to add this to build it:</p>
				<div class="flex flex-col gap-2">
					@_AddWorkbenchItem("57347c77245977448d35f6e2")
					@_AddWorkbenchItem("57347c5b245977448d35f6e1")
					@_AddWorkbenchItem("544fb5454bdc2df8738b456a")
				</div>
			</div>
		} else {
			<div class="w-full p-2">
				<input type="text" autocomplete="off" id="filter-user-weapons-input" onkeyup="filterUserWeapons()" placeholder="Filter here" class="input input-bordered w-full max-w-xs"/>
			</div>
			<div class="flex flex-wrap gap-2 h-full content-start p-2 overflow-y-auto" id="weapons-list">
				for _, weaponBuild := range userBuilds.WeaponBuilds {
					{{ globalIdx := slices.IndexFunc(allItems.GlobalPresets, func(i models.ViewPreset) bool { return weaponBuild.Items[0].Tpl == i.Encyclopedia }) }}
					{{ maybePresetId := "" }}
					{{if globalIdx != -1 {
	maybePresetId = allItems.GlobalPresets[globalIdx].Id
}
					}}
					<div class="card bg-base-200 w-72 max-h-80 shadow-xl card-to-filter">
						<figure class="bg-base-300">
							if maybePresetId != "" {
								<img alt="item" style="max-height: 100px" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", maybePresetId) }/>
							} else {
								<img alt="item" style="max-height: 100px" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", weaponBuild.Items[0].Tpl) }/>
							}
						</figure>
						<div class="card-body overflow-y-auto">
							<h2 class="card-title text-start">{ weaponBuild.Name }</h2>
							<p class="text-start">{ fmt.Sprintf("%d parts", len(weaponBuild.Items)) }</p>
							<div class="card-actions justify-end items-end grow">
								<button class="btn btn-primary" hx-post={ fmt.Sprintf("/user-weapons/%s", weaponBuild.Id) } hx-target="#main" hx-trigger="click" hx-disabled-elt="this" hx-indicator="#loader">
									<div id="loader" class="button-loader">
										<span class="loading loading-spinner"></span>
										<span class="button-hide">Give</span>
									</div>
								</button>
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
}

templ _AddWorkbenchItem(itemId string) {
	<div class="flex items-center gap-4">
		<img alt="item" style="max-height: 80px" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", itemId) }/>
		<button class="btn btn-primary" hx-post={ fmt.Sprintf("/item/%s", itemId) } hx-target="#main" hx-trigger="click" hx-disabled-elt="this" hx-indicator="#loader">
			<div id="loader" class="button-loader">
				<span class="loading loading-spinner"></span>
				<span class="button-hide">Give</span>
			</div>
		</button>
	</div>
}

templ _Button(classes string, hxUrl string, hxTarget string, hxSwap string, method string, label string, hxIndicator string, hxDisabledElt string) {
	<button
		class={ fmt.Sprintf("btn %s", classes) }
		type="submit"
		hx-target={ hxTarget }
		hx-trigger="click"
		hx-swap="outerhtml transition:false"
		if method == "get" {
			hx-get={ hxUrl }
		}
		if method == "post" {
			hx-post={ hxUrl }
		}
		if hxIndicator != "" {
			hx-indicator={ hxIndicator }
		}
		if hxDisabledElt != "" {
			hx-disabled-elt={ hxDisabledElt }
		}
	>{ label }</button>
}
