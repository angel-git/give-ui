package components

import (
	"fmt"
	"slices"
	"sort"
	"spt-give-ui/backend/models"
	"strings"
)

templ LoginPage(appName string, appVersion string, currentTheme string, sptUrl string) {
	<div id="main" class="w-full h-full p-2 overflow-y-auto">
		@_AppHeader(appName, appVersion)
		<div class="card align-middle mx-auto bg-base-200 w-full max-w-md shadow-2xl">
			<form class="card-body" hx-post="/connect" hx-target="#main" hx-swap="innerHTML" hx-indicator="#loader" hx-disabled-elt="find button">
				<div class="form-control">
					<label class="label">
						<span class="label-text">SPT URL</span>
					</label>
					<input type="text" name="url" value={ sptUrl } class="input input-bordered" required/>
				</div>
				<div class="form-control mt-6">
					<button class="btn btn-primary">CONNECT</button>
				</div>
				<progress id="loader" class="progress w-full htmx-indicator"></progress>
			</form>
		</div>
	</div>
	@_AppFooter(appName, appVersion, currentTheme)
}

templ ErrorConnection(e models.GiveUiError) {
	@_AppHeader(e.AppName, e.AppVersion)
	<div class="card mx-auto bg-base-200 w-full max-w-md shadow-2xl">
		<div class="card-body">
			<h2 class="text-error">Connection Error</h2>
			<div>Please check SPT Server is running, the connection details are correct and the mod is installed in your user folder</div>
			<pre class="text-xs whitespace-normal">{ e.Error }</pre>
			<button class="btn btn-primary btn-outline" onclick="location.reload()">Go back</button>
		</div>
	</div>
}

templ ProfileList(appName string, appVersion string, profiles []models.SPTProfile) {
	@_AppHeader(appName, appVersion)
	<div class="card mx-auto bg-base-200 w-full max-w-md shadow-2xl">
		<div class="card-body">
			<h2>Select profile</h2>
			<fieldset id="profile-fieldset">
				<ul class="flex flex-col gap-1">
					for _, i := range profiles {
						<li class="flex flex-row items-center justify-between gap-2">
							<div class="text-left">
								<div><strong>{ i.Info.Username }</strong> { i.Characters.Pmc.Info.Nickname }</div>
								<div class="text-xs">{ i.Info.Id }</div>
							</div>
							<button class="btn btn-primary btn-sm" hx-get={ fmt.Sprintf("/connect/%s", i.Info.Id) } hx-target="#main" hx-trigger="click" hx-disabled-elt="#profile-fieldset" hx-indicator="#loader">
								SELECT
							</button>
						</li>
					}
				</ul>
			</fieldset>
			<progress id="loader" class="progress w-full htmx-indicator"></progress>
		</div>
	</div>
}

templ MainPage(appName string, appVersion string, allItems *models.AllItems, profile *models.SPTProfile) {
	@templ.JSONScript("profile-selected-username", profile.Info.Username)
	@templ.JSONScript("profile-selected-nickname", profile.Characters.Pmc.Info.Nickname)
	<script>
        const username = JSON.parse(document.getElementById("profile-selected-username").textContent);
        const nickname = JSON.parse(document.getElementById("profile-selected-nickname").textContent);
        document.getElementById('profile-selected').innerText = ": " + username + " - " + nickname;
    </script>
	<div class="flex flex-col h-full justify-between">
		<div role="tablist" class="tabs tabs-bordered tabs-lg overflow-y-auto flex-1">
			<input type="radio" name="my_tabs_1" role="tab" class="tab" aria-label="Items" checked="checked"/>
			<div role="tabpanel" class="tab-content p-1 overflow-y-auto">
				@_Items(allItems, profile.Info.Id)
			</div>
			<input type="radio" name="my_tabs_1" role="tab" class="tab" aria-label="User weapons"/>
			<div role="tabpanel" class="tab-content p-1 overflow-y-auto">
				@_UserWeapons(allItems, profile.UserBuilds.WeaponBuilds, profile.Info.Id)
			</div>
		</div>
	</div>
}

templ ItemDetail(item models.ViewItem, maybePresetId string) {
	<div class="card w-full">
		<figure class="bg-base-300 min-h-[6rem] p-4">
			if maybePresetId != "" {
				<img alt="item" class="max-h-52" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", maybePresetId) }/>
			} else {
				<img alt="item" class="max-h-52" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", item.Id) }/>
			}
		</figure>
		<div class="card-body">
			<h2 class="card-title">{ item.Name }</h2>
			<p class="text-justify">{ item.Description }</p>
			<form class="card-actions justify-end" hx-swap="none" hx-post="/item" hx-indicator="#loader" hx-disabled-elt="this">
				<input name="quantity" type="number" min="1" max="2147483647" class="input input-bordered" value={ fmt.Sprintf("%d", item.MaxStock) }/>
				<input name="id" hidden value={ item.Id }/>
				<button type="submit" class="btn btn-primary">
					<div id="loader" class="button-loader">
						<span class="loading loading-spinner"></span>
						<span class="button-hide">Give</span>
					</div>
				</button>
			</form>
		</div>
	</div>
}

func sortAndConvertItems(allItems *models.AllItems) []models.ViewItem {
	itemsSlice := make([]models.ViewItem, 0, len(allItems.Items))
	for _, item := range allItems.Items {
		itemsSlice = append(itemsSlice, item)
	}
	sort.SliceStable(itemsSlice, func(i, j int) bool {
		return itemsSlice[i].Name < itemsSlice[j].Name
	})
	return itemsSlice
}

templ _Items(allItems *models.AllItems, sessionId string) {
	{{ sortedItems := sortAndConvertItems(allItems) }}
	<script type="text/javascript">

        let previousSelectedItem = null;
        function filterItems() {
              const input = document.getElementById('filter-items-input');
              const filter = input.value.toUpperCase().trim();
              const itemList = document.getElementById("item-list");
              const li = itemList.getElementsByTagName('li');

              // Loop through all list items, and hide those who don't match the search query
              for (i = 0; i < li.length; i++) {
                const txtValue = (li[i].textContent || li[i].innerText).toUpperCase().trim();
                const itemCategory = li[i].parentElement.getAttribute('data-category').toUpperCase().trim();
                if (txtValue.indexOf(filter) > -1 || itemCategory.indexOf(filter) > -1) {
                  li[i].style.display = "";
                } else {
                  li[i].style.display = "none";
                }
              }

              // hide empty categories
          const section = itemList.getElementsByTagName('details');
              for (i = 0; i < section.length; i++) {
                const innerLis = section[i].getElementsByTagName('li');
                let anyLiVisible = false;
                for (j = 0; j < innerLis.length; j++) {
                    if (innerLis[j].style.display === "") {
                        anyLiVisible = true;
                        break;
                    }
                }
                if (anyLiVisible) {
                    section[i].style.display = "";
                } else {
                    section[i].style.display = "none";
                }
              }
        }

        function selectItem(element) {
            const classToToggle = 'text-primary';
            if (previousSelectedItem) {
                previousSelectedItem.classList.remove(classToToggle);
            }
            element.classList.add(classToToggle);
            previousSelectedItem = element;
        }
      </script>
	<div class="flex flex-col h-full">
		<div class="w-full p-2">
			<input type="text" autocomplete="off" id="filter-items-input" onkeyup="filterItems()" placeholder="Filter here" class="input input-bordered w-full max-w-xs"/>
		</div>
		<div class="flex w-full h-full min-h-0" id="item-list">
			<div class="card p-2 bg-base-200 rounded-box grid overflow-y-auto place-items-start flex-1 basis-2/5 content-start gap-4">
				for _, cat := range allItems.Categories {
					<details class="flex flex-col w-full" open>
						<summary class="flex flex-row-reverse justify-between flex-2 sticky -top-2 bg-base-200 border-b-2 border-white"><h2>{ cat }</h2></summary>
						<ul data-category={ cat }>
							for _, i := range sortedItems {
								if i.Category == cat {
									<li class="text-left cursor-pointer hover:bg-primary hover:text-base-content" onclick="selectItem(this)" hx-get={ fmt.Sprintf("/item/%s", i.Id) } hx-trigger="click" hx-target="#item-details" hx-swap="innerHTML"><div>{ i.Name }</div></li>
								}
							}
						</ul>
					</details>
				}
			</div>
			<div class="divider divider-horizontal"></div>
			<div class="card bg-base-200 rounded-box grid flex-grow place-items-start w-full overflow-y-auto" id="item-details">
				<div class="p-2">
					<p class="text-9xl mb-4">ðŸ‘€</p>
					<p class="text-left mb-4">Select something from the left menu and press the button <em>Give</em>. You will receive a message with the item at maximum stack size.</p>
					<p class="text-left">If you need more, just keep pressing :-)</p>
				</div>
			</div>
		</div>
	</div>
}

templ _UserWeapons(allItems *models.AllItems, weaponBuilds []models.WeaponBuild, sessionId string) {
	<script type="text/javascript">

        function filterUserWeapons() {
              const input = document.getElementById('filter-user-weapons-input');
              const filter = input.value.toUpperCase().trim();
              const itemList = document.getElementById("weapons-list");
              const cards = itemList.getElementsByClassName('card-to-filter');

              // Loop through all list items, and hide those who don't match the search query
              for (i = 0; i < cards.length; i++) {
                const title = cards[i].getElementsByTagName('h2')[0];
                const txtValue = (title.textContent || title.innerText).toUpperCase().trim();
                if (txtValue.indexOf(filter) > -1) {
                  cards[i].style.display = "";
                } else {
                  cards[i].style.display = "none";
                }
              }
        }

        function showModal(event) {
            const dialog = document.getElementById(event.getAttribute('data-dialog-target'));
            dialog.showModal();
        }

    </script>
	<div class="h-full flex flex-col">
		if len(weaponBuilds) == 0 {
			<div role="alert" class="alert alert-info">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					class="h-6 w-6 shrink-0 stroke-current"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
					></path>
				</svg>
				<span>You don't have weapons presets. Make sure you have the workbench at level 1 in your hideout and some custom presets saved.</span>
			</div>
			<div class="p-2">
				<p class="text-left">Psss Psss you might want to add this to build it:</p>
				<div class="flex flex-col gap-2">
					@_AddWorkbenchItem("57347c77245977448d35f6e2", "1")
					@_AddWorkbenchItem("57347c5b245977448d35f6e1", "1")
					@_AddWorkbenchItem("544fb5454bdc2df8738b456a", "1")
				</div>
			</div>
		} else {
			<div class="w-full p-2">
				<input type="text" autocomplete="off" id="filter-user-weapons-input" onkeyup="filterUserWeapons()" placeholder="Filter here" class="input input-bordered w-full max-w-xs"/>
			</div>
			<div class="flex flex-wrap gap-2 h-full content-start p-2 overflow-y-auto" id="weapons-list">
				for _, weaponBuild := range weaponBuilds {
					{{ globalIdx := slices.IndexFunc(allItems.GlobalPresets, func(i models.ViewPreset) bool { return weaponBuild.Items[0].Tpl == i.Encyclopedia }) }}
					{{ maybePresetId := "" }}
					{{if globalIdx != -1 {
	maybePresetId = allItems.GlobalPresets[globalIdx].Id
}
					}}
					<div class="card bg-base-200 w-72 max-h-96 shadow-xl card-to-filter">
						<figure class="bg-base-300 h-28">
							if maybePresetId != "" {
								<img alt="item" class="max-h-full" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", maybePresetId) }/>
							} else {
								<img alt="item" class="max-h-full" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", weaponBuild.Items[0].Tpl) }/>
							}
						</figure>
						<div class="card-body overflow-y-auto">
							<h2 class="card-title text-start">{ weaponBuild.Name }</h2>
							<button class="w-max p-0 btn btn-link" data-dialog-target={ weaponBuild.Id } onclick="showModal(this)">{ fmt.Sprintf("See %d parts", len(weaponBuild.Items)) }</button>
							<div class="card-actions justify-end items-end grow">
								<dialog id={ weaponBuild.Id } class="modal">
									<div class="modal-box flex flex-col">
										<h3 class="text-lg font-bold">{ weaponBuild.Name }</h3>
										<div class="flex flex-col gap-4 overflow-y-auto">
											for _, item := range weaponBuild.Items {
												<div>
													<div class="w-16 h-16 table-cell align-middle">
														<img alt="item" class="max-h-full max-w-full m-auto" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", item.Tpl) }/>
													</div>
													<div class="pl-2 text-start table-cell align-middle">{ allItems.Items[item.Tpl].Name }</div>
												</div>
											}
										</div>
									</div>
									<form method="dialog" class="modal-backdrop">
										<button tabIndex="-1">close</button>
									</form>
								</dialog>
								<button class="btn btn-primary" hx-post={ fmt.Sprintf("/user-weapons/%s", weaponBuild.Id) } hx-target="#main" hx-trigger="click" hx-disabled-elt="this" hx-indicator="#loader">
									<div id="loader" class="button-loader">
										<span class="loading loading-spinner"></span>
										<span class="button-hide">Give</span>
									</div>
								</button>
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
}

templ _MagazineLoadouts(magazineLoadouts []models.MagazineBuild, sessionId string) {
	<script type="text/javascript">

        function filterMagazineLoadout() {
              const input = document.getElementById('filter-magazine-loadout-input');
              const filter = input.value.toUpperCase().trim();
              const itemList = document.getElementById("magazine-loadout-list");
              const cards = itemList.getElementsByClassName('card-to-filter');

              // Loop through all list items, and hide those who don't match the search query
              for (i = 0; i < cards.length; i++) {
                const title = cards[i].getElementsByTagName('h2')[0];
                const txtValue = (title.textContent || title.innerText).toUpperCase().trim();
                if (txtValue.indexOf(filter) > -1) {
                  cards[i].style.display = "";
                } else {
                  cards[i].style.display = "none";
                }
              }
        }

    </script>
	<div class="h-full flex flex-col">
		if len(magazineLoadouts) == 0 {
			<div role="alert" class="alert alert-info p-2">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					class="h-6 w-6 shrink-0 stroke-current"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
					></path>
				</svg>
				<span>You don't have magazine loadouts.</span>
			</div>
		} else {
			{{sort.Slice(magazineLoadouts, func(i, j int) bool {
	if magazineLoadouts[i].Caliber == magazineLoadouts[j].Caliber {
		return magazineLoadouts[i].Name < magazineLoadouts[j].Name
	}
	return magazineLoadouts[i].Caliber < magazineLoadouts[j].Caliber
})
			}}
			<div class="w-full p-2">
				<input type="text" autocomplete="off" id="filter-magazine-loadout-input" onkeyup="filterMagazineLoadout()" placeholder="Filter here" class="input input-bordered w-full max-w-xs"/>
			</div>
			<div class="flex flex-wrap gap-2 h-full content-start p-2 overflow-y-auto" id="magazine-loadout-list">
				for _, magazineLoadout := range magazineLoadouts {
					{{ caliber := strings.Replace(magazineLoadout.Caliber, "Caliber", "", -1) }}
					<div class="card bg-base-200 w-72 shadow-xl card-to-filter">
						<div class="card-body overflow-y-auto">
							<h2 class="card-title text-start">{ magazineLoadout.Name }</h2>
							<p class="text-left">{ caliber }</p>
							<div class="flex gap-4 flex-wrap">
								for _, bullet := range magazineLoadout.Items {
									if bullet.TemplateId != "" {
										<img alt="item" class="max-h-16" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", bullet.TemplateId) }/>
									}
								}
							</div>
							<div class="card-actions justify-end items-end grow">
								<button class="btn btn-primary" hx-post={ fmt.Sprintf("/magazine-loadouts/%s", magazineLoadout.Id) } hx-target="#main" hx-trigger="click" hx-disabled-elt="this" hx-indicator="#loader">
									<div id="loader" class="button-loader">
										<span class="loading loading-spinner"></span>
										<span class="button-hide">Give all</span>
									</div>
								</button>
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
}

templ _AddWorkbenchItem(itemId string, itemQuantity string) {
	<div class="flex items-center gap-4">
		<img alt="item" class="max-h-16" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", itemId) }/>
		<form class="card-actions justify-end" hx-swap="none" hx-post="/item" hx-indicator="#loader" hx-disabled-elt="this">
			<input name="quantity" hidden value={ itemQuantity }/>
			<input name="id" hidden value={ itemId }/>
			<button type="submit" class="btn btn-primary">
				<div id="loader" class="button-loader">
					<span class="loading loading-spinner"></span>
					<span class="button-hide">Give</span>
				</div>
			</button>
		</form>
	</div>
}

templ _AppHeader(appName string, appVersion string) {
	<h1 class="mb-4">{ strings.ToUpper(appName) } v{ appVersion }</h1>
}

templ _AppFooter(appName string, appVersion string, currentTheme string) {
	<div class="pt-1 border-t-2 border-t-base-200">
		<div class="flex justify-between items-center p-1">
			<p class="text-xs text-left">{ strings.ToUpper(appName) } v{ appVersion }<span id="profile-selected"></span></p>
			@_ThemeSwitcher(currentTheme)
		</div>
	</div>
}

templ _ThemeSwitcher(currentTheme string) {
	<div class="scale-75">
		<label class="flex cursor-pointer gap-2 items-center">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="20"
				height="20"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
			>
				<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
			</svg>
			<input type="checkbox" value="retro" checked?={ currentTheme == "retro" } class="toggle theme-controller" hx-post="/theme" hx-target="#main" hx-trigger="change"/>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="20"
				height="20"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
			>
				<circle cx="12" cy="12" r="5"></circle>
				<path
					d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"
				></path>
			</svg>
		</label>
	</div>
}
