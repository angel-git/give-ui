package components

import (
	"fmt"
	"slices"
	"sort"
	"spt-give-ui/backend/models"
	"strings"
)

templ LoginPage(appName string, appVersion string, currentTheme string, sptUrl string) {
	<div id="main" class="w-full h-full p-2 overflow-y-auto">
		@_AppHeader(appName, appVersion)
		<div class="card align-middle mx-auto bg-base-200 w-full max-w-md shadow-2xl">
			<form class="card-body" hx-post="/connect" hx-target="#main" hx-swap="innerHTML" hx-indicator="#loader" hx-disabled-elt="find button">
				<div class="form-control">
					<label class="label">
						<span class="label-text">SPT URL</span>
					</label>
					<input type="text" name="url" value={ sptUrl } class="input input-bordered" required/>
				</div>
				<div class="form-control mt-6">
					<button class="btn btn-primary">CONNECT</button>
				</div>
				<progress id="loader" class="progress w-full htmx-indicator"></progress>
			</form>
		</div>
	</div>
	@_AppFooter(appName, appVersion, currentTheme)
}

templ ErrorConnection(e models.GiveUiError) {
	@_AppHeader(e.AppName, e.AppVersion)
	<div class="card mx-auto bg-base-200 w-full max-w-md shadow-2xl">
		<div class="card-body">
			<h2 class="text-error">Connection Error</h2>
			<div>Please check SPT Server is running, the connection details are correct and the mod is installed in your user folder</div>
			<pre class="text-xs whitespace-normal">{ e.Error }</pre>
			<button class="btn btn-primary btn-outline" onclick="location.reload()">Go back</button>
		</div>
	</div>
}

templ ProfileList(appName string, appVersion string, profiles []models.SPTProfile) {
	@_AppHeader(appName, appVersion)
	<div class="card mx-auto bg-base-200 w-full max-w-md shadow-2xl">
		<div class="card-body">
			<h2>Select profile</h2>
			<fieldset id="profile-fieldset">
				<ul class="flex flex-col gap-1">
					for _, i := range profiles {
						<li class="flex flex-row items-center justify-between gap-2">
							<div class="text-left">
								<div>{ i.Info.Username }</div>
								<div class="text-xs">{ i.Info.Id }</div>
							</div>
							<button class="btn btn-primary btn-sm" hx-get={ fmt.Sprintf("/connect/%s", i.Info.Id) } hx-target="#main" hx-trigger="click" hx-disabled-elt="#profile-fieldset" hx-indicator="#loader">
								SELECT
							</button>
						</li>
					}
				</ul>
			</fieldset>
			<progress id="loader" class="progress w-full htmx-indicator"></progress>
		</div>
	</div>
}

templ MainPage(appName string, appVersion string, allItems *models.AllItems, filterFavorites bool, profile *models.SPTProfile) {
	@templ.JSONScript("profile-selected-username", profile.Info.Username)
	<script>
        setUsernameOnFooter();
    </script>
	<div class="flex flex-col h-full justify-between">
		<div role="tablist" class="tabs tabs-bordered tabs-lg overflow-y-auto flex-1">
			<input type="radio" name="my_tabs_1" role="tab" class="tab" aria-label="Items" checked="checked"/>
			<div role="tabpanel" class="tab-content p-1 overflow-y-auto">
				@_Items(allItems, profile.Info.Id, filterFavorites)
			</div>
			<input type="radio" name="my_tabs_1" role="tab" class="tab" aria-label="User weapons"/>
			<div role="tabpanel" class="tab-content p-1 overflow-y-auto">
				@UserWeapons(allItems, profile.UserBuilds.WeaponBuilds)
			</div>
			<div class="grow text-right">
				<div class="dropdown dropdown-hover dropdown-end">
					<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-sm m-1">Help</div>
					<div tabindex="0" class="dropdown-content menu bg-base-200 rounded-box z-[1] w-80 p-2 shadow text-left">
						<p><kbd class="kbd kbd-xs">Ctrl + Shift + S</kbd> to toggle favorites search</p>
						<p><kbd class="kbd kbd-xs">Ctrl + Shift + A</kbd> to add selected item</p>
						<p><kbd class="kbd kbd-xs">Ctrl + Shift + F</kbd> to fav/unfav selected item</p>
					</div>
				</div>
			</div>
			<div id="success-toast" class="toast toast-top toast-end hidden">
				<div id="success-toast-message" class="alert alert-success"></div>
			</div>
		</div>
	</div>
}

templ ItemDetail(item models.ViewItem, maybePresetId string) {
	<div class="card w-full">
		<figure class="bg-base-300 min-h-[6rem] p-4">
			if maybePresetId != "" {
				<img alt="item" class="max-h-52" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", maybePresetId) }/>
			} else {
				<img alt="item" class="max-h-52" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", item.Id) }/>
			}
		</figure>
		<div class="card-body">
			<div class="card-title">
				<h2>{ item.Name }</h2>
				<label class="swap swap-rotate">
					<input type="checkbox" class="focus:border-2 focus:border-primary focus:outline-none" checked?={ item.Favorite } hx-post={ fmt.Sprintf("/fav/%s", item.Id) } hx-trigger="change, keydown[key=='Enter'], keydown[ctrlKey&&shiftKey&&key=='F'] from:body" hx-target="#item-details" hx-swap="innerHTML"/>
					<svg
						class="swap-on"
						fill="currentColor"
						width="32"
						height="32"
						viewBox="0 0 20 20"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path fill-rule="evenodd" clip-rule="evenodd" d="M10 2C10.3681 2 10.7042 2.20895 10.8671 2.539L12.8155 6.48624L17.1728 7.12312C17.5369 7.17634 17.8393 7.43164 17.9528 7.78171C18.0663 8.13179 17.9713 8.51594 17.7077 8.77272L14.5556 11.8429L15.2995 16.1802C15.3617 16.543 15.2125 16.9097 14.9147 17.1261C14.6169 17.3424 14.2221 17.3709 13.8963 17.1996L10 15.1506L6.10375 17.1996C5.77794 17.3709 5.38311 17.3424 5.08529 17.1261C4.78746 16.9097 4.6383 16.543 4.70053 16.1802L5.44443 11.8429L2.29233 8.77272C2.0287 8.51594 1.93367 8.13179 2.04717 7.78171C2.16068 7.43164 2.46305 7.17634 2.8272 7.12312L7.18446 6.48624L9.13286 2.539C9.29577 2.20895 9.63193 2 10 2Z"></path>
					</svg>
					<svg
						class="swap-off"
						width="32"
						height="32"
						viewBox="0 0 20 20"
						fill="currentColor"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path fill-rule="evenodd" clip-rule="evenodd" d="M10 2C10.3681 2 10.7042 2.20895 10.8671 2.539L12.8155 6.48624L17.1728 7.12312C17.5369 7.17634 17.8393 7.43164 17.9528 7.78171C18.0663 8.13179 17.9713 8.51594 17.7077 8.77272L14.5556 11.8429L15.2995 16.1802C15.3617 16.543 15.2125 16.9097 14.9147 17.1261C14.6169 17.3424 14.2221 17.3709 13.8963 17.1996L10 15.1506L6.10375 17.1996C5.77794 17.3709 5.38311 17.3424 5.08529 17.1261C4.78746 16.9097 4.6383 16.543 4.70053 16.1802L5.44443 11.8429L2.29233 8.77272C2.0287 8.51594 1.93367 8.13179 2.04717 7.78171C2.16068 7.43164 2.46305 7.17634 2.8272 7.12312L7.18446 6.48624L9.13286 2.539C9.29577 2.20895 9.63193 2 10 2ZM10 5.1518L8.69396 7.79768C8.55322 8.08281 8.28131 8.28053 7.96668 8.32651L5.04464 8.75361L7.15826 10.8123C7.38635 11.0344 7.49047 11.3547 7.43664 11.6685L6.93803 14.5756L9.54989 13.2021C9.83167 13.0539 10.1683 13.0539 10.4501 13.2021L13.062 14.5756L12.5634 11.6685C12.5095 11.3547 12.6136 11.0344 12.8417 10.8123L14.9554 8.75361L12.0333 8.32651C11.7187 8.28053 11.4468 8.08281 11.306 7.79768L10 5.1518Z"></path>
					</svg>
				</label>
			</div>
			<p class="text-justify text-sm">{ item.Id }</p>
			<p class="text-justify">{ item.Description }</p>
			<form class="card-actions justify-end" hx-swap="none" hx-post="/item" hx-indicator="#loader" hx-disabled-elt="this" hx-trigger="submit, keydown[ctrlKey&&shiftKey&&key=='A'] from:body">
				<input name="quantity" type="number" min="1" max="2147483647" class="input input-bordered bg-base-200 max-w-24" value={ fmt.Sprintf("%d", item.MaxStock) }/>
				<input name="id" hidden value={ item.Id }/>
				<button type="submit" class="btn btn-primary">
					<div id="loader" class="button-loader">
						<span class="loading loading-spinner"></span>
						<span class="button-hide">Give</span>
					</div>
				</button>
			</form>
		</div>
	</div>
}

func sortAndConvertItems(allItems *models.AllItems, filterFavorites bool) []models.ViewItem {
	itemsSlice := make([]models.ViewItem, 0, len(allItems.Items))
	for _, item := range allItems.Items {
		if filterFavorites && !item.Favorite {
			continue
		}
		itemsSlice = append(itemsSlice, item)
	}
	sort.SliceStable(itemsSlice, func(i, j int) bool {
		return itemsSlice[i].Name < itemsSlice[j].Name
	})
	return itemsSlice
}

func anyItemInsideCategory(cat string, items []models.ViewItem) bool {
	for _, i := range items {
		if i.Category == cat {
			return true
		}
	}
	return false
}

templ _Items(allItems *models.AllItems, sessionId string, filterFavorites bool) {
	{{ sortedItems := sortAndConvertItems(allItems, filterFavorites) }}
	<div class="flex flex-col h-full">
		<div class="w-full p-2 flex items-center justify-center">
			<label class="input input-bordered bg-base-200 flex items-center gap-2 max-w-xs w-full">
				<input type="text" autocomplete="off" id="filter-items-input" oninput="filterItems()" placeholder="Filter here" autofocus class="grow"/>
				@_FavSwitcher(sessionId, filterFavorites)
			</label>
		</div>
		<div class="flex w-full h-full min-h-0" id="item-list">
			<div class="card p-2 bg-base-200 rounded-box grid overflow-y-auto place-items-start flex-1 basis-2/5 content-start gap-4">
				for _, cat := range allItems.Categories {
					if anyItemInsideCategory(cat, sortedItems) {
						<details class="flex flex-col w-full" open>
							<summary tabindex="-1" class="flex flex-row-reverse justify-between flex-2 sticky -top-2 bg-base-200 border-b-2 border-white"><h2>{ cat }</h2></summary>
							<ul data-category={ cat }>
								for _, i := range sortedItems {
									if i.Category == cat {
										<li tabindex="0" class="text-left cursor-pointer hover:bg-primary hover:text-base-content focus:bg-base-300 focus:text-primary focus:outline-none" data-item-id={ i.Id } onkeydown="selectItemFromKeyboard(event, this)" onclick="selectItem(this)" hx-get={ fmt.Sprintf("/item/%s", i.Id) } hx-trigger="click, keydown[key=='Enter']" hx-target="#item-details" hx-swap="innerHTML"><div>{ i.Name }</div></li>
									}
								}
							</ul>
						</details>
					}
				}
			</div>
			<div class="divider divider-horizontal"></div>
			<div class="card bg-base-200 rounded-box grid flex-grow place-items-start w-full overflow-y-auto" id="item-details">
				<div class="p-2">
					<p class="text-9xl mb-4">👀</p>
					<p class="text-left mb-4">Select something from the left menu and press the button <em>Give</em>. You will receive a message with the item at maximum stack size.</p>
					<p class="text-left">If you need more, just keep pressing :-)</p>
				</div>
			</div>
		</div>
	</div>
}

templ UserWeapons(allItems *models.AllItems, weaponBuilds []models.WeaponBuild) {
	<div class="h-full flex flex-col" id="user-weapons">
		if len(weaponBuilds) == 0 {
			<div role="alert" class="alert alert-info">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					class="h-6 w-6 shrink-0 stroke-current"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
					></path>
				</svg>
				<span>You don't have weapons presets. Make sure you have the workbench at level 1 in your hideout and some custom presets saved.</span>
			</div>
			<div class="p-2">
				<p class="text-left">Psss Psss you might want to add this to build it:</p>
				<div class="flex flex-col gap-2">
					@_AddWorkbenchItem("57347c77245977448d35f6e2", "1")
					@_AddWorkbenchItem("57347c5b245977448d35f6e1", "1")
					@_AddWorkbenchItem("544fb5454bdc2df8738b456a", "1")
				</div>
			</div>
		} else {
			<div class="w-full p-2 flex items-center justify-center">
				<label class="input input-bordered bg-base-200 flex items-center gap-2 max-w-xs w-full justify-between">
					<input type="text" autocomplete="off" id="filter-user-weapons-input" oninput="filterUserWeapons()" placeholder="Filter here" autofocus/>
					@_RefreshPreset()
				</label>
			</div>
			<div class="flex flex-wrap gap-2 h-full content-start p-2 overflow-y-auto" id="weapons-list">
				for _, weaponBuild := range weaponBuilds {
					{{ globalIdx := slices.IndexFunc(allItems.GlobalPresets, func(i models.ViewPreset) bool { return weaponBuild.Items[0].Tpl == i.Encyclopedia }) }}
					{{ maybePresetId := "" }}
					{{if globalIdx != -1 {
	maybePresetId = allItems.GlobalPresets[globalIdx].Id
}
					}}
					<div class="card bg-base-200 w-72 max-h-96 shadow-xl card-to-filter">
						<figure class="bg-base-300 h-28">
							if maybePresetId != "" {
								<img alt="item" class="max-h-full" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", maybePresetId) }/>
							} else {
								<img alt="item" class="max-h-full" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", weaponBuild.Items[0].Tpl) }/>
							}
						</figure>
						<div class="card-body overflow-y-auto">
							<h2 class="card-title text-start">{ weaponBuild.Name }</h2>
							<button class="w-max p-0 btn btn-link" data-dialog-target={ weaponBuild.Id } onclick="showModal(this)">{ fmt.Sprintf("See %d parts", len(weaponBuild.Items)) }</button>
							<div class="card-actions justify-end items-end grow">
								<dialog id={ weaponBuild.Id } class="modal">
									<div class="modal-box flex flex-col">
										<h3 class="text-lg font-bold">{ weaponBuild.Name }</h3>
										<div class="flex flex-col gap-4 overflow-y-auto">
											for _, item := range weaponBuild.Items {
												<div>
													<div class="w-16 h-16 table-cell align-middle">
														<img alt="item" class="max-h-full max-w-full m-auto" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", item.Tpl) }/>
													</div>
													<div class="pl-2 text-start table-cell align-middle">{ allItems.Items[item.Tpl].Name }</div>
												</div>
											}
										</div>
									</div>
									<form method="dialog" class="modal-backdrop">
										<button tabIndex="-1">close</button>
									</form>
								</dialog>
								<button class="btn btn-primary" hx-post={ fmt.Sprintf("/user-weapons/%s", weaponBuild.Id) } hx-target="#main" hx-trigger="click" hx-disabled-elt="this" hx-indicator="#loader">
									<div id="loader" class="button-loader">
										<span class="loading loading-spinner"></span>
										<span class="button-hide">Give</span>
									</div>
								</button>
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
}

templ _MagazineLoadouts(magazineLoadouts []models.MagazineBuild) {
	<div class="h-full flex flex-col">
		if len(magazineLoadouts) == 0 {
			<div role="alert" class="alert alert-info p-2">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					class="h-6 w-6 shrink-0 stroke-current"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
					></path>
				</svg>
				<span>You don't have magazine loadouts.</span>
			</div>
		} else {
			{{sort.Slice(magazineLoadouts, func(i, j int) bool {
	if magazineLoadouts[i].Caliber == magazineLoadouts[j].Caliber {
		return magazineLoadouts[i].Name < magazineLoadouts[j].Name
	}
	return magazineLoadouts[i].Caliber < magazineLoadouts[j].Caliber
})
			}}
			<div class="w-full p-2">
				<input type="text" autocomplete="off" id="filter-magazine-loadout-input" oninput="filterMagazineLoadout()" placeholder="Filter here" class="input input-bordered w-full max-w-xs"/>
			</div>
			<div class="flex flex-wrap gap-2 h-full content-start p-2 overflow-y-auto" id="magazine-loadout-list">
				for _, magazineLoadout := range magazineLoadouts {
					{{ caliber := strings.Replace(magazineLoadout.Caliber, "Caliber", "", -1) }}
					<div class="card bg-base-200 w-72 shadow-xl card-to-filter">
						<div class="card-body overflow-y-auto">
							<h2 class="card-title text-start">{ magazineLoadout.Name }</h2>
							<p class="text-left">{ caliber }</p>
							<div class="flex gap-4 flex-wrap">
								for _, bullet := range magazineLoadout.Items {
									if bullet.TemplateId != "" {
										<img alt="item" class="max-h-16" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", bullet.TemplateId) }/>
									}
								}
							</div>
							<div class="card-actions justify-end items-end grow">
								<button class="btn btn-primary" hx-post={ fmt.Sprintf("/magazine-loadouts/%s", magazineLoadout.Id) } hx-target="#main" hx-trigger="click" hx-disabled-elt="this" hx-indicator="#loader">
									<div id="loader" class="button-loader">
										<span class="loading loading-spinner"></span>
										<span class="button-hide">Give all</span>
									</div>
								</button>
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
}

templ _AddWorkbenchItem(itemId string, itemQuantity string) {
	<div class="flex items-center gap-4">
		<img alt="item" class="max-h-16" src={ fmt.Sprintf("https://assets.tarkov.dev/%s-base-image.png", itemId) }/>
		<form class="card-actions justify-end" hx-swap="none" hx-post="/item" hx-indicator="#loader" hx-disabled-elt="this">
			<input name="quantity" hidden value={ itemQuantity }/>
			<input name="id" hidden value={ itemId }/>
			<button type="submit" class="btn btn-primary">
				<div id="loader" class="button-loader">
					<span class="loading loading-spinner"></span>
					<span class="button-hide">Give</span>
				</div>
			</button>
		</form>
	</div>
}

templ _AppHeader(appName string, appVersion string) {
	<h1 class="mb-4">{ strings.ToUpper(appName) } v{ appVersion }</h1>
}

templ _AppFooter(appName string, appVersion string, currentTheme string) {
	<div class="pt-1 border-t-2 border-t-base-200">
		<div class="flex justify-between items-center p-1">
			<p class="text-xs text-left">{ strings.ToUpper(appName) } v{ appVersion }<span id="profile-selected"></span></p>
			@_ThemeSwitcher(currentTheme)
		</div>
	</div>
}

templ _ThemeSwitcher(currentTheme string) {
	<div class="scale-75">
		<label class="flex cursor-pointer gap-2 items-center">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="20"
				height="20"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
			>
				<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
			</svg>
			<input type="checkbox" value="retro" checked?={ currentTheme == "retro" } class="toggle theme-controller" hx-post="/theme" hx-target="#main" hx-trigger="change"/>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="20"
				height="20"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
			>
				<circle cx="12" cy="12" r="5"></circle>
				<path
					d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"
				></path>
			</svg>
		</label>
	</div>
}

templ _FavSwitcher(sessionId string, filterFavorites bool) {
	<div class="scale-75">
		<label class="swap swap-rotate">
			<input type="checkbox" class="focus:border-2 focus:border-primary focus:outline-none" checked?={ filterFavorites } hx-get={ fmt.Sprintf("/search/%s?", sessionId) } hx-disabled-elt="this" hx-target="#main" hx-trigger="click, keydown[ctrlKey&&shiftKey&&key=='S'] from:body"/>
			<svg
				class="swap-off"
				width="32"
				height="32"
				viewBox="0 0 20 20"
				fill="currentColor"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path fill-rule="evenodd" clip-rule="evenodd" d="M10 2C10.3681 2 10.7042 2.20895 10.8671 2.539L12.8155 6.48624L17.1728 7.12312C17.5369 7.17634 17.8393 7.43164 17.9528 7.78171C18.0663 8.13179 17.9713 8.51594 17.7077 8.77272L14.5556 11.8429L15.2995 16.1802C15.3617 16.543 15.2125 16.9097 14.9147 17.1261C14.6169 17.3424 14.2221 17.3709 13.8963 17.1996L10 15.1506L6.10375 17.1996C5.77794 17.3709 5.38311 17.3424 5.08529 17.1261C4.78746 16.9097 4.6383 16.543 4.70053 16.1802L5.44443 11.8429L2.29233 8.77272C2.0287 8.51594 1.93367 8.13179 2.04717 7.78171C2.16068 7.43164 2.46305 7.17634 2.8272 7.12312L7.18446 6.48624L9.13286 2.539C9.29577 2.20895 9.63193 2 10 2ZM10 5.1518L8.69396 7.79768C8.55322 8.08281 8.28131 8.28053 7.96668 8.32651L5.04464 8.75361L7.15826 10.8123C7.38635 11.0344 7.49047 11.3547 7.43664 11.6685L6.93803 14.5756L9.54989 13.2021C9.83167 13.0539 10.1683 13.0539 10.4501 13.2021L13.062 14.5756L12.5634 11.6685C12.5095 11.3547 12.6136 11.0344 12.8417 10.8123L14.9554 8.75361L12.0333 8.32651C11.7187 8.28053 11.4468 8.08281 11.306 7.79768L10 5.1518Z"></path>
			</svg>
			<svg
				class="swap-on"
				fill="currentColor"
				width="32"
				height="32"
				viewBox="0 0 20 20"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path fill-rule="evenodd" clip-rule="evenodd" d="M10 2C10.3681 2 10.7042 2.20895 10.8671 2.539L12.8155 6.48624L17.1728 7.12312C17.5369 7.17634 17.8393 7.43164 17.9528 7.78171C18.0663 8.13179 17.9713 8.51594 17.7077 8.77272L14.5556 11.8429L15.2995 16.1802C15.3617 16.543 15.2125 16.9097 14.9147 17.1261C14.6169 17.3424 14.2221 17.3709 13.8963 17.1996L10 15.1506L6.10375 17.1996C5.77794 17.3709 5.38311 17.3424 5.08529 17.1261C4.78746 16.9097 4.6383 16.543 4.70053 16.1802L5.44443 11.8429L2.29233 8.77272C2.0287 8.51594 1.93367 8.13179 2.04717 7.78171C2.16068 7.43164 2.46305 7.17634 2.8272 7.12312L7.18446 6.48624L9.13286 2.539C9.29577 2.20895 9.63193 2 10 2Z"></path>
			</svg>
		</label>
	</div>
}

templ _RefreshPreset() {
	<div class="scale-75">
		<button class="btn btn-circle" hx-get="/user-weapons" hx-target="#user-weapons" hx-swap="outerHTML" hx-disabled-elt="button">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="currentColor"
				width="32"
				height="32"
				viewBox="0 0 30 30"
			>
				<path d="M 15 3 C 12.031398 3 9.3028202 4.0834384 7.2070312 5.875 A 1.0001 1.0001 0 1 0 8.5058594 7.3945312 C 10.25407 5.9000929 12.516602 5 15 5 C 20.19656 5 24.450989 8.9379267 24.951172 14 L 22 14 L 26 20 L 30 14 L 26.949219 14 C 26.437925 7.8516588 21.277839 3 15 3 z M 4 10 L 0 16 L 3.0507812 16 C 3.562075 22.148341 8.7221607 27 15 27 C 17.968602 27 20.69718 25.916562 22.792969 24.125 A 1.0001 1.0001 0 1 0 21.494141 22.605469 C 19.74593 24.099907 17.483398 25 15 25 C 9.80344 25 5.5490109 21.062074 5.0488281 16 L 8 16 L 4 10 z"></path>
			</svg>
		</button>
	</div>
}
